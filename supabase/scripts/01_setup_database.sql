-- University Matcher Database Setup Script
-- Run this in Supabase SQL Editor to create all required tables and sample data

-- 1. Create universities table
CREATE TABLE IF NOT EXISTS universities (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    code TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Create faculties table
CREATE TABLE IF NOT EXISTS faculties (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    university_id INTEGER REFERENCES universities(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Create subjects table
CREATE TABLE IF NOT EXISTS subjects (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    code TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4. Create courses table
CREATE TABLE IF NOT EXISTS courses (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    code TEXT NOT NULL UNIQUE,
    duration INTEGER,
    description TEXT,
    total_aps_required INTEGER,
    faculty_id INTEGER REFERENCES faculties(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. Create course_requirements table
CREATE TABLE IF NOT EXISTS course_requirements (
    id SERIAL PRIMARY KEY,
    course_id INTEGER REFERENCES courses(id) ON DELETE CASCADE,
    subject_id INTEGER REFERENCES subjects(id) ON DELETE CASCADE,
    min_score INTEGER NOT NULL,
    explanation TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(course_id, subject_id)
);

-- 6. Create sessions table for logging
CREATE TABLE IF NOT EXISTS sessions (
    id SERIAL PRIMARY KEY,
    learner_id TEXT NOT NULL, -- Can be UUID or text identifier
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 7. Create events table for analytics
CREATE TABLE IF NOT EXISTS events (
    id SERIAL PRIMARY KEY,
    session_id INTEGER REFERENCES sessions(id) ON DELETE CASCADE,
    event_type TEXT NOT NULL,
    event_data JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Insert sample data for testing

-- Sample universities
INSERT INTO universities (name, code) VALUES
('University of Cape Town', 'UCT'),
('University of the Witwatersrand', 'WITS'),
('Stellenbosch University', 'SUN');

-- Sample faculties
INSERT INTO faculties (name, university_id) VALUES
('Faculty of Science', 1),
('Faculty of Engineering', 1),
('Faculty of Commerce', 2),
('Faculty of Humanities', 3);

-- Sample subjects
INSERT INTO subjects (name, code) VALUES
('Mathematics', 'MATH'),
('Physical Science', 'PHSC'),
('English', 'ENGL'),
('Life Sciences', 'LISC'),
('Accounting', 'ACCT'),
('Geography', 'GEOG');

-- Sample courses
INSERT INTO courses (name, code, duration, description, total_aps_required, faculty_id) VALUES
('BSc Computer Science', 'CS001', 3, 'Bachelor of Science in Computer Science', 30, 1),
('BEng Civil Engineering', 'CE001', 4, 'Bachelor of Engineering in Civil Engineering', 32, 2),
('BCom Accounting', 'AC001', 3, 'Bachelor of Commerce in Accounting', 28, 3),
('BA Psychology', 'PS001', 3, 'Bachelor of Arts in Psychology', 26, 4);

-- Sample course requirements
INSERT INTO course_requirements (course_id, subject_id, min_score, explanation) VALUES
(1, 1, 70, 'Mathematics is essential for computer science'),
(1, 2, 65, 'Physical science provides foundation for computing concepts'),
(1, 3, 60, 'English proficiency required for documentation'),
(2, 1, 75, 'Advanced mathematics needed for engineering'),
(2, 2, 70, 'Physical science core for engineering principles'),
(2, 3, 60, 'Communication skills important for engineering'),
(3, 1, 60, 'Basic mathematics for accounting calculations'),
(3, 5, 65, 'Accounting subject required for commerce degree'),
(3, 3, 60, 'Business communication skills'),
(4, 3, 65, 'Strong language skills for psychology'),
(4, 6, 60, 'Geography provides social context'),
(4, 4, 60, 'Life sciences background helpful for psychology');

-- Sample session (optional - will be generated by function)
INSERT INTO sessions (learner_id, ip_address, user_agent) VALUES
('test-learner-1', '192.168.1.1', 'Test User Agent');

-- Sample event (optional - will be generated by function)
INSERT INTO events (session_id, event_type, event_data) VALUES
(1, 'test_event', '{"action": "test", "result": "success"}');

-- Enable Row Level Security (RLS) on sensitive tables
ALTER TABLE sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE events ENABLE ROW LEVEL SECURITY;

-- Create policies for sessions table
CREATE POLICY "Sessions are viewable by own learner_id" ON sessions
    FOR SELECT USING (learner_id = current_user OR auth.role() = 'authenticated');

CREATE POLICY "Anyone can insert sessions" ON sessions
    FOR INSERT WITH CHECK (true);

-- Create policies for events table
CREATE POLICY "Events are viewable by authenticated users" ON events
    FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Anyone can insert events" ON events
    FOR INSERT WITH CHECK (true);

-- Grant public access to read-only tables for the Edge Function
ALTER TABLE universities ENABLE ROW LEVEL SECURITY;
ALTER TABLE faculties ENABLE ROW LEVEL SECURITY;
ALTER TABLE subjects ENABLE ROW LEVEL SECURITY;
ALTER TABLE courses ENABLE ROW LEVEL SECURITY;
ALTER TABLE course_requirements ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public can read universities" ON universities FOR SELECT USING (true);
CREATE POLICY "Public can read faculties" ON faculties FOR SELECT USING (true);
CREATE POLICY "Public can read subjects" ON subjects FOR SELECT USING (true);
CREATE POLICY "Public can read courses" ON courses FOR SELECT USING (true);
CREATE POLICY "Public can read course_requirements" ON course_requirements FOR SELECT USING (true);

-- Display confirmation message
SELECT 'Database setup completed successfully! Tables created and sample data inserted.' AS result;